AWSTemplateFormatVersion: 2010-09-09
Description: Exercise AWS S3 CLI Security - EC2 Instances and S3 Buckets (for pem files) for Participants
Parameters:
  Env:
    Type: String
    Default: DEV
    Description: Environment Name
  AmiId:
    Type: String
    Default: EC2_IMAGE_ID
    Description: AmiId for deployment EC2s
  InstanceType:
    Type: String
    Default: t2.micro
    Description: Instance type for deployment EC2s
  Vpc:
    Type: String
    Default: AWS_VPC_ID
    Description: VPC for deployment EC2s and codebuild stages that need a vpc
  Subnet:
    Type: String
    Default: SUBNET_ID
    Description: Subnet
  SecurityGroup:
    Type: CommaDelimitedList
    Default: SECURITY_GROUP_IDS
    Description: Security Group
  NameTagPrefix:
    Type: String
    Default: ANTHEM-HUBBLE-SVR
    Description: Name Tag Prefix
  PermissionsBoundary:
    Type: String
    Default: 'arn:aws:iam::aws:policy/AdministratorAccess'
    Description: >-
      A permission boundary should be passed here as an inline parameter in CLI
      create-stack command
Resources:
  EC2ROLE:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'ec2-role-${AWS::StackName}'
      PermissionsBoundary: !Ref PermissionsBoundary
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ec2policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource: !Sub 'arn:aws:s3:::bucket-${AWS::StackName}'
  EC2INSTANCE:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AmiId
      KeyName: !Sub '${AWS::StackName}'
      InstanceType: !Ref InstanceType
      SubnetId: !Ref Subnet
      SecurityGroupIds: !Ref SecurityGroup
      IamInstanceProfile: !Ref EC2PROFILE
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: '30'
            DeleteOnTermination: 'true'
      UserData: !Base64 
        'Fn::Sub': |
          #!/bin/bash -xe
          sudo yum update -y
      Tags:
        - Key: app-business-owner
          Value: Sheri Reed
        - Key: app-servicenow-group
          Value: Hubble Support
        - Key: app-support-dl
          Value: DL-DevOpsCOETeam@anthem.com
        - Key: application-name
          Value: HUBBLE
        - Key: application-runtime-platform
          Value: AngularJS and NodeJS
        - Key: barometer-it
          Value: 041800001GSF
        - Key: business-division
          Value: GBD
        - Key: company
          Value: ANTM
        - Key: compliance
          Value: None
        - Key: costcenter
          Value: '6590218200'
        - Key: created-by
          Value: 'ag20836, using cloudformation'
        - Key: created-description
          Value: hubble-api prod
        - Key: 'environment '
          Value: !Sub '${Env}'
        - Key: location
          Value: AWS
        - Key: operating-system
          Value: Amazon Linux 2
        - Key: owner-department
          Value: GBD COO
        - Key: Patch Group
          Value: Default
        - Key: Patch Window
          Value: Default
        - Key: resource-type
          Value: SVR
        - Key: schedule-window
          Value: ALWAYSON
        - Key: virtualization-platform
          Value: N/A
        - Key: Name
          Value: !Sub '${NameTagPrefix}-${Env}-${AWS::StackName}'
    DependsOn:
      - LambdaInvoke
  EC2PROFILE:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref EC2ROLE
    DependsOn:
      - EC2ROLE
  KeyPairLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt 
        - LambdaRole
        - Arn
      Runtime: python2.7
      Description: Test with Cloud Formation
      FunctionName: !Ref 'AWS::StackName'
      Code:
        ZipFile: |-
          import json
          import logging
          import signal
          import boto3
          from urllib2 import build_opener, HTTPHandler, Request
          s3 = boto3.resource('s3')
          s3client = boto3.client('s3')
          ec2 = boto3.client('ec2')
          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)
          def lambda_handler(event, context):
              keypairname = event['ResourceProperties']['KeyPairName']
              accountid = boto3.client('sts').get_caller_identity()['Account']
              bucket = (keypairname).lower()
              key = keypairname + ".pem"
              print key
              try:
                  LOGGER.info('REQUEST RECEIVED:\n %s', event)
                  LOGGER.info('REQUEST RECEIVED:\n %s', context)
                  if event['RequestType'] == 'Create':
                      LOGGER.info('CREATE!')
                      response = ec2.create_key_pair(KeyName=keypairname)
                      keymaterial = response['KeyMaterial']
                      s3.create_bucket(Bucket=bucket)
                      s3client.put_bucket_encryption(Bucket=bucket, ServerSideEncryptionConfiguration={'Rules': [{ 'ApplyServerSideEncryptionByDefault': { 'SSEAlgorithm': 'aws:kms' }}]})
                      object = s3.Object(bucket, key)
                      object.put(Body=keymaterial)
                      send_response(event, context, "SUCCESS",
                                    {"Message": "Resource creation successful!"})
                  elif event['RequestType'] == 'Update':
                      LOGGER.info('UPDATE!')
                      send_response(event, context, "SUCCESS",
                                    {"Message": "Resource update successful!"})
                  elif event['RequestType'] == 'Delete':
                      LOGGER.info('DELETE!')
                      response = ec2.delete_key_pair(KeyName=keypairname)
                      object = s3.Object(bucket, key)
                      object.delete()
                      objectb = s3.Bucket(bucket)
                      objectb.delete()
                      send_response(event, context, "SUCCESS",
                                    {"Message": "Resource deletion successful!"})
                  else:
                      LOGGER.info('FAILED!')
                      send_response(event, context, "FAILED",
                                    {"Message": "Unexpected event received from CloudFormation"})
              except: #pylint: disable=W0702
                  LOGGER.info('FAILED!')
                  send_response(event, context, "FAILED", {
                      "Message": "Exception during processing"})
          def send_response(event, context, response_status, response_data):
              '''Send a resource manipulation status response to CloudFormation'''
              response_body = json.dumps({
                  "Status": response_status,
                  "Reason": "See the details in CloudWatch Log Stream: " + context.log_stream_name,
                  "PhysicalResourceId": context.log_stream_name,
                  "StackId": event['StackId'],
                  "RequestId": event['RequestId'],
                  "LogicalResourceId": event['LogicalResourceId'],
                  "Data": response_data
              })
              LOGGER.info('ResponseURL: %s', event['ResponseURL'])
              LOGGER.info('ResponseBody: %s', response_body)
              opener = build_opener(HTTPHandler)
              request = Request(event['ResponseURL'], data=response_body)
              request.add_header('Content-Type', '')
              request.add_header('Content-Length', len(response_body))
              request.get_method = lambda: 'PUT'
              response = opener.open(request)
              LOGGER.info("Status code: %s", response.getcode())
              LOGGER.info("Status message: %s", response.msg)
    DependsOn:
      - LambdaRole
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      PermissionsBoundary: !Ref PermissionsBoundary
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: lambdas3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action: 's3:*'
                Resource: '*'
              - Effect: Allow
                Action: 'ec2:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'
  LambdaInvoke:
    Type: 'Custom::Invoker'
    Properties:
      Description: This is how you invoke the Lambda
      ServiceToken: !Sub >-
        arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}
      KeyPairName: !Ref 'AWS::StackName'
    DependsOn:
      - KeyPairLambda
Outputs:
  EC2InstanceID:
    Description: AWS assigned Instance ID of the EC2
    Value: !Ref EC2INSTANCE
  EC2PrivateIP:
    Description: Private IP address of the EC2 Instance
    Value: !GetAtt
      - EC2INSTANCE
      - PrivateIp
  EC2Role:
    Description: Role assigned to the EC2
    Value: !GetAtt
      - EC2ROLE
      - Arn


